
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

#Parameters
hbar = 1.0
m = 1.0
omega = 1.0

#Spatial grid and harmonic oscillator potential
N_points = 500
x_min, x_max = -7.0, 7.0
x = np.linspace(x_min, x_max, N_points)
dx = x[1] - x[0]
V = 0.5 * m * omega**2 * x**2

#Finite-difference method for Hamiltonian matrix
main_diag = np.full(N_points, -2.0) #Form the 1D array for diagonal elements
off_diag = np.full(N_points - 1, 1.0) #Form the 1D array for off-diagonal elements
kinetic = -(hbar**2) / (2*m*dx**2) * (np.diag(main_diag) + np.diag(off_diag, 1) + np.diag(off_diag, -1))  #np.diag is converting 1D arrays to 2D matrices, by placing elemnts on diagonal or off-diagonal
potential = np.diag(V)
H = kinetic + potential

#Guessed initial wave function (gaussian) (need to overlap with the initial state)
sigma = 2.0
k = 10.0  # ''frequency'' of sinusoidal modulation
psi_init = np.exp(-x**2/(2*sigma**2)) * np.sin(k * x)
psi_init /= np.linalg.norm(psi_init)
psi = psi_init.copy() #now psi is a 1D array, with the same shape as x

#Analytical ground state
psi_analytical = (m*omega/np.pi/hbar)**0.25 * np.exp(-m*omega*x**2/(2*hbar))
psi_analytical /= np.linalg.norm(psi_analytical)

#Animation parameters
dtau = 0.0005
total_steps = 80000
frames = 400     # Total frames in the animation
steps_per_frame = total_steps // frames

#Store wave function evolution and energies for animation
wave_evolution = []
energies = []

#Iteration loop for imaginary time evolution
for i in range(frames):
    for j in range(steps_per_frame):
        psi -= dtau / hbar * H.dot(psi) #H.dot(psi) is the matrix multiplication: matrix H times matrix psi
        psi /= np.linalg.norm(psi)
    wave_evolution.append(psi.copy()) # Store the wave function at this frame #.copy is to make sure keep adding new arrays to the list
    energy = np.dot(psi, H.dot(psi)) #dot product and matrix multiplication: psi transposed times (H times psi)
    energies.append(energy)

#Set up animation plot
fig, ax = plt.subplots(figsize=(8, 5))
ax.set_xlabel(r"$x$", fontsize=20)
ax.set_ylabel(r"$\psi(x)$", fontsize=20)
# No static title here
ax.set_xlim(-7.0, 7.0)
ax.set_ylim(-0.15, 0.2)
ax.tick_params(which="major", axis="both", direction="in", top=True, right=True, length=5, width=1, labelsize=14)

line_num, = ax.plot([], [], '-b', lw=2.5, label="Numerical Wave Function")
line_init, = ax.plot([], [], '-.g', lw=2, label="Initial Wave Function")
line_analytical, = ax.plot([], [], '--r', lw=2, label="Analytical Ground State")
ax.legend(loc=1, fontsize=12)

def init():
    line_num.set_data([], [])
    line_init.set_data(x, psi_init)
    line_analytical.set_data(x, psi_analytical)
    return line_num, line_init, line_analytical

def animate(i):
    line_num.set_data(x, wave_evolution[i])
    iteration = (i + 1) * steps_per_frame
    energy = energies[i]
    ax.set_title(f"Iteration: {iteration}    Ground State Energy: {energy:.6f}", fontsize=16)
    return line_num, line_init, line_analytical

ani = animation.FuncAnimation(
    fig, animate, init_func=init, frames=frames, interval=200, blit=True
)

plt.show()
#To save the animation as MP4:
ani.save("imaginary_time_evolution.mp4", writer="ffmpeg", fps=30)

