from math import pi, sqrt
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

#here we assumed hbar = 1, m = 1


# Class to hold parameters for the simulation
class Param:
    def __init__(self, xmax: float, res: int, dt: float, timesteps: int, im_time: bool) -> None: # -> None indicates no return value
        self.xmax = xmax # Maximum x value
        self.res = res # Resolution (number of points)
        self.dt = dt # Time step size
        self.timesteps = timesteps # Total number of time steps
        self.im_time = im_time # Whether to use imaginary time evolution

        self.dx = 2 * xmax / res
        self.x = np.arange(-xmax + (xmax / res), xmax, self.dx) # This creates an array of x values from -xmax to xmax with the specified resolution, [- xmax + xmax / res, xmax - xmax / res]
        self.dk = pi / xmax # dk = 2pi/ 2 xmax
        self.k = np.concatenate((np.arange(0, res / 2), np.arange(-res / 2, 0))) * self.dk
        # concatenate means connexting two arrays, here it creates a k array that contains positive frequencies followed by negative frequencies
        # now k = [0, 1, 2, ..., res/2 - 1, -res/2, -res/2 + 1, ..., -1], note that the res need to be even for this to work properly
        # The arrangement of array is because the FFT function assumes that the input is periodic, so it needs to have the positive frequencies first, then the negative frequencies
        # this is a common convention in np.fft


# Class to hold operators used
class Operators:
    def __init__(self, res: int) -> None:
        self.V = np.empty(res, dtype=complex) # V is the potential operator
        self.R = np.empty(res, dtype=complex) # R is the ``potential" operator for split step method
        self.K = np.empty(res, dtype=complex) # K is the kinetic operator for split step method
        self.psi = np.empty(res, dtype=complex) # psi is the wavefunction operator


# Function to initialize operators based on parameters
def init(par: Param, voffset: float, psi_offset: float): # -> Operators indicates that this function returns an Operators object 
    opr = Operators(len(par.x)) # Insert the length of x (from Param) to initialize Operators
    opr.V = 0.5 * (par.x - voffset) ** 2 # Potential for the harmonic oscillator
    opr.psi = np.exp(-((par.x - psi_offset) ** 2) / 2, dtype=complex) # Initial wavefunction, Gaussian centered at psi_offset
    if par.im_time: # When it's true, we are doing imaginary time evolution
        opr.K = np.exp(-0.5 * (par.k ** 2) * par.dt) # Iminary time evolution kinetic operator (full step)
        opr.R = np.exp(-0.5 * opr.V * par.dt) # Imaginary time evolution potential operator (half step)
    else: # When it's false, we are doing real time evolution
        opr.K = np.exp(-0.5 * (par.k ** 2) * par.dt * 1j) # Kinetic operator for real time evolution (full step)
        opr.R = np.exp(-0.5 * opr.V * par.dt * 1j) # Potential operator for real time evolution (half step)
    return opr


# Function to perform the split-step method
def split_op(par: Param, opr: Operators, store_every: int = 1): # this function returns a list of numpy arrays # store_every is the frequency of storing frames
    frames = []

    for i in range(par.timesteps):
        opr.psi *= opr.R 
        opr.psi = np.fft.fft(opr.psi)
        opr.psi *= opr.K
        opr.psi = np.fft.ifft(opr.psi)
        opr.psi *= opr.R

        density = np.abs(opr.psi) ** 2

        if par.im_time:
            renorm_factor = sum(density) * par.dx
            opr.psi /= sqrt(renorm_factor)

        if i % store_every == 0: #If the current step is a multiple of store_every, store the frame
            frames.append(density.copy())

    return frames

    
# Function to calculate the energy of the system
def calculate_energy(par: Param, opr: Operators) -> float:
    psi_r = opr.psi # Real space wavefunction
    psi_k = np.fft.fft(psi_r) # Fourier transform to momentum space
    psi_c = np.conj(psi_r) # Complex conjugate of the real space wavefunction
    energy_k = 0.5 * psi_c * np.fft.ifft((par.k ** 2) * psi_k)
    energy_r = psi_c * opr.V * psi_r
    energy_final = sum(energy_k + energy_r).real # .real ensures we only take the real part of the energy, as it should be real-valued
    return energy_final * par.dx # Multiply by dx to account for the discretization of space


# Function to animate the wavefunction density over time
def animate_density(par: Param, frames, potential):
    fig, ax = plt.subplots()

    # Plot wavefunction density
    density_line, = ax.plot([], [], lw=2, label="|ψ(x)|²")

    # Plot potential scaled to match max density
    V_scaled = potential.real / np.max(potential.real) * np.max(frames[0])
    potential_line, = ax.plot(par.x, V_scaled, 'r--', label="V(x) (rescaled)")

    ax.set_xlim(par.x[0], par.x[-1])
    ax.set_ylim(0, np.max(frames[0]) * 1.2)
    ax.set_xlabel("x")
    ax.set_ylabel("Density |ψ(x)|²")
    ax.set_title("Imaginary Time Evolution")
    ax.legend()

    def init_anim():
        density_line.set_data([], [])
        return density_line, potential_line

    def update(frame):
        density_line.set_data(par.x, frame)
        return density_line, potential_line

    ani = FuncAnimation(fig, update, frames=frames, init_func=init_anim,
                        blit=True, interval=50)

    ani.save("Split-Step Method/SplitStep_SHO.mp4", writer="ffmpeg", fps=30)


# Main function to run the simulation
def main():
    par = Param(xmax=5.0, res=256, dt=0.05, timesteps=1000, im_time=False)
    opr = init(par, voffset=0.0, psi_offset=-2)

    frames = split_op(par, opr, store_every=1)
    energy = calculate_energy(par, opr)
    print("Final energy: ", energy)

    animate_density(par, frames, opr.V)


# Entry point for the script
if __name__ == "__main__":
    main()
